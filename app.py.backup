from flask import Flask, render_template, request, jsonify, send_file
from datetime import datetime
from ota_manager import ota_bp
import os
import sqlite3
from werkzeug.utils import secure_filename

app = Flask(__name__)
app.register_blueprint(ota_bp)

# 视频上传配置
UPLOAD_FOLDER = 'data/videos'
ALLOWED_EXTENSIONS = {'mp4', 'avi', 'mov', 'wmv', 'flv', 'webm', 'mkv'}
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
app.config['MAX_CONTENT_LENGTH'] = 500 * 1024 * 1024  # 500MB

# 确保上传目录存在
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

def init_video_database():
    """初始化视频数据库"""
    conn = sqlite3.connect('data/videos.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS videos (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            filename TEXT NOT NULL,
            original_name TEXT NOT NULL,
            upload_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            file_size INTEGER,
            description TEXT,
            tags TEXT,
            category TEXT DEFAULT "纺织检测",
            is_training_data BOOLEAN DEFAULT 1,
            status TEXT DEFAULT "active"
        )
    ''')
    conn.commit()
    conn.close()

def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

@app.route('/')
def home():
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    return render_template('index.html', current_time=current_time)

@app.route('/about')
def about():
    return render_template('about.html')

@app.route('/contact')
def contact():
    return render_template('contact.html')

@app.route('/video_upload')
def video_upload_page():
    """视频上传页面"""
    return '''
    <!DOCTYPE html>
    <html>
    <head>
        <title>视频上传 - 纺织视觉系统</title>
        <style>
            body { font-family: Arial; margin: 40px; background: #f5f5f5; }
            .container { max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
            h1 { color: #333; text-align: center; }
            .upload-form { margin: 30px 0; }
            .form-group { margin-bottom: 20px; }
            label { display: block; margin-bottom: 8px; font-weight: bold; color: #555; }
            input, textarea, select { width: 100%; padding: 12px; border: 2px solid #ddd; border-radius: 5px; font-size: 16px; }
            input:focus, textarea:focus, select:focus { border-color: #007cba; outline: none; }
            button { background: #007cba; color: white; padding: 15px 30px; border: none; border-radius: 5px; cursor: pointer; font-size: 16px; width: 100%; }
            button:hover { background: #005a87; }
            .progress { margin: 20px 0; background: #f0f0f0; border-radius: 10px; overflow: hidden; }
            .progress-bar { background: #007cba; height: 20px; width: 0%; transition: width 0.3s; }
            .video-list { margin-top: 40px; }
            .video-item { background: #f9f9f9; padding: 15px; margin: 10px 0; border-radius: 5px; border-left: 4px solid #007cba; }
            .success { color: green; padding: 10px; background: #e8f5e8; border-radius: 5px; }
            .error { color: red; padding: 10px; background: #ffe8e8; border-radius: 5px; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>🎥 纺织视觉系统 - 视频上传</h1>
            
            <div class="upload-form">
                <form id="uploadForm" enctype="multipart/form-data">
                    <div class="form-group">
                        <label for="videoFile">选择视频文件:</label>
                        <input type="file" id="videoFile" name="video" accept="video/*" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="description">视频描述:</label>
                        <textarea id="description" name="description" placeholder="描述视频内容，如：棉布缺陷检测、丝绸纹理分析等" rows="3"></textarea>
                    </div>
                    
                    <div class="form-group">
                        <label for="tags">标签:</label>
                        <input type="text" id="tags" name="tags" placeholder="用逗号分隔，如：棉布,缺陷,训练数据">
                    </div>
                    
                    <div class="form-group">
                        <label for="category">分类:</label>
                        <select id="category" name="category">
                            <option value="纺织检测">纺织检测</option>
                            <option value="布料分析">布料分析</option>
                            <option value="缺陷识别">缺陷识别</option>
                            <option value="纹理分析">纹理分析</option>
                            <option value="训练数据">训练数据</option>
                        </select>
                    </div>
                    
                    <button type="submit">📤 上传视频</button>
                </form>
                
                <div class="progress" style="display:none;">
                    <div class="progress-bar"></div>
                </div>
                
                <div id="message"></div>
            </div>
            
            <div class="video-list">
                <h2>已上传的视频</h2>
                <div id="videoList"></div>
            </div>
        </div>

        <script>
            // 加载视频列表
            function loadVideos() {
                fetch('/api/videos')
                    .then(response => response.json())
                    .then(videos => {
                        const list = document.getElementById('videoList');
                        if (videos.length === 0) {
                            list.innerHTML = '<p>暂无上传的视频</p>';
                            return;
                        }
                        
                        list.innerHTML = videos.map(video => `
                            <div class="video-item">
                                <strong>${video.original_name}</strong><br>
                                大小: ${(video.file_size / 1024 / 1024).toFixed(2)} MB<br>
                                描述: ${video.description || '无'}<br>
                                标签: ${video.tags || '无'}<br>
                                上传时间: ${new Date(video.upload_time).toLocaleString()}<br>
                                <button onclick="downloadVideo(${video.id})">📥 下载</button>
                                <button onclick="deleteVideo(${video.id})" style="background: #dc3545;">🗑️ 删除</button>
                            </div>
                        `).join('');
                    });
            }

            // 上传表单处理
            document.getElementById('uploadForm').addEventListener('submit', function(e) {
                e.preventDefault();
                
                const formData = new FormData();
                const fileInput = document.getElementById('videoFile');
                const description = document.getElementById('description').value;
                const tags = document.getElementById('tags').value;
                const category = document.getElementById('category').value;
                
                formData.append('video', fileInput.files[0]);
                formData.append('description', description);
                formData.append('tags', tags);
                formData.append('category', category);
                
                const progressBar = document.querySelector('.progress-bar');
                const progressContainer = document.querySelector('.progress');
                progressContainer.style.display = 'block';
                
                fetch('/api/upload_video', {
                    method: 'POST',
                    body: formData
                })
                .then(response => response.json())
                .then(data => {
                    progressContainer.style.display = 'none';
                    if (data.success) {
                        document.getElementById('message').innerHTML = 
                            `<div class="success">✅ ${data.message}</div>`;
                        loadVideos();
                        document.getElementById('uploadForm').reset();
                    } else {
                        document.getElementById('message').innerHTML = 
                            `<div class="error">❌ ${data.message}</div>`;
                    }
                })
                .catch(error => {
                    progressContainer.style.display = 'none';
                    document.getElementById('message').innerHTML = 
                        `<div class="error">❌ 上传失败: ${error}</div>`;
                });
            });

            // 下载视频
            function downloadVideo(videoId) {
                window.open(`/api/download_video/${videoId}`, '_blank');
            }

            // 删除视频
            function deleteVideo(videoId) {
                if (confirm('确定要删除这个视频吗？')) {
                    fetch(`/api/delete_video/${videoId}`, { method: 'DELETE' })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                alert('✅ 视频已删除');
                                loadVideos();
                            } else {
                                alert('❌ 删除失败');
                            }
                        });
                }
            }

            // 页面加载时获取视频列表
            loadVideos();
        </script>
    </body>
    </html>
    '''

@app.route('/api/upload_video', methods=['POST'])
def upload_video():
    """上传视频API"""
    try:
        if 'video' not in request.files:
            return jsonify({'success': False, 'message': '没有选择文件'})
        
        file = request.files['video']
        if file.filename == '':
            return jsonify({'success': False, 'message': '没有选择文件'})
        
        if file and allowed_file(file.filename):
            # 安全文件名
            filename = secure_filename(file.filename)
            # 添加时间戳避免重名
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"{timestamp}_{filename}"
            
            file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            file.save(file_path)
            
            # 获取文件大小
            file_size = os.path.getsize(file_path)
            
            # 保存到数据库
            conn = sqlite3.connect('data/videos.db')
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO videos (filename, original_name, file_size, description, tags, category)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (filename, file.filename, file_size, 
                  request.form.get('description'), 
                  request.form.get('tags'),
                  request.form.get('category')))
            conn.commit()
            conn.close()
            
            return jsonify({
                'success': True, 
                'message': f'视频上传成功！文件名: {filename}',
                'filename': filename
            })
        else:
            return jsonify({'success': False, 'message': '不支持的文件格式'})
            
    except Exception as e:
        return jsonify({'success': False, 'message': f'上传失败: {str(e)}'})

@app.route('/api/videos')
def get_videos():
    """获取视频列表API"""
    try:
        conn = sqlite3.connect('data/videos.db')
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM videos WHERE status = "active" ORDER BY upload_time DESC')
        videos = cursor.fetchall()
        conn.close()
        
        video_list = []
        for video in videos:
            video_list.append({
                'id': video[0],
                'filename': video[1],
                'original_name': video[2],
                'upload_time': video[3],
                'file_size': video[4],
                'description': video[5],
                'tags': video[6],
                'category': video[7]
            })
        
        return jsonify(video_list)
    except Exception as e:
        return jsonify([])

@app.route('/api/download_video/<int:video_id>')
def download_video(video_id):
    """下载视频API"""
    try:
        conn = sqlite3.connect('data/videos.db')
        cursor = conn.cursor()
        cursor.execute('SELECT filename, original_name FROM videos WHERE id = ?', (video_id,))
        video = cursor.fetchone()
        conn.close()
        
        if video:
            return send_file(
                os.path.join(app.config['UPLOAD_FOLDER'], video[0]),
                as_attachment=True,
                download_name=video[1]
            )
        else:
            return "视频不存在", 404
    except Exception as e:
        return str(e), 500

@app.route('/api/delete_video/<int:video_id>', methods=['DELETE'])
def delete_video(video_id):
    """删除视频API"""
    try:
        conn = sqlite3.connect('data/videos.db')
        cursor = conn.cursor()
        
        # 获取文件名
        cursor.execute('SELECT filename FROM videos WHERE id = ?', (video_id,))
        video = cursor.fetchone()
        
        if video:
            # 删除文件
            file_path = os.path.join(app.config['UPLOAD_FOLDER'], video[0])
            if os.path.exists(file_path):
                os.remove(file_path)
            
            # 标记数据库记录为删除
            cursor.execute('UPDATE videos SET status = "deleted" WHERE id = ?', (video_id,))
            conn.commit()
            conn.close()
            
            return jsonify({'success': True, 'message': '视频已删除'})
        else:
            conn.close()
            return jsonify({'success': False, 'message': '视频不存在'})
            
    except Exception as e:
        return jsonify({'success': False, 'message': f'删除失败: {str(e)}'})

@app.route('/auto-deploy-test')
def auto_deploy_test():
    return "自动部署测试成功！部署时间：" + str(datetime.now())

# 初始化数据库
init_video_database()

if __name__ == '__main__':
    app.run(debug=True)
